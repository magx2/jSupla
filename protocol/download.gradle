buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath group: 'org.assertj', name: 'assertj-core', version: '3.26.0'
	}
}


import java.nio.file.Files

import static org.assertj.core.api.Assertions.*
import static org.assertj.core.api.Assertions.assertThat

task downloadProtoLatest {
	group = 'jSupla'
	outputs.file project.file("build" + project.downloadRootDir + "/proto-${project.downloadLatestTag}.h")
	doLast {
		downloadProtoByTag(project.downloadLatestTag as String)
	}
}
task downloadProtoStable {
	group = 'jSupla'
	outputs.file project.file("build" + project.downloadRootDir + "/proto-${project.downloadStableTag}.h")
	doLast {
		downloadProtoByTag(project.downloadStableTag as String)
	}
}
parseProtoh.dependsOn "downloadProtoStable"

task checkForProtoUpdate {
	group = 'jSupla'
	doLast {
		def rootDir = project.file("build" + project.downloadRootDir).toPath()
		def downloadStableTag = project.downloadStableTag
		def latestTag = rootDir.resolve("proto-${project.downloadLatestTag}.h").toFile()
		def stableTag = rootDir.resolve("proto-${downloadStableTag}.h").toFile()

		assertThat(latestTag)
			.as("Content of ${latestTag.name} and ${stableTag.name} are different! Please update stableTag in ext.\n" +
				"Visit https://github.com/SUPLA/supla-core/blob/master/supla-common/proto.h to get latest proto.h or \n" +
				"visit https://github.com/SUPLA/supla-core/compare/${downloadStableTag}..master to get diff")
			.hasSameTextualContentAs(stableTag)

		logger.debug("Content of ${latestTag.name} and ${stableTag.name} are equal")
	}
}
checkForProtoUpdate.dependsOn "downloadProtoStable"
checkForProtoUpdate.dependsOn "downloadProtoLatest"

void downloadProtoByTag(String tag) {
	def rootDir = project.file("build" + project.downloadRootDir).toPath()
	Files.createDirectories(rootDir)

	def path = rootDir.resolve("proto-${tag}.h")
	if (Files.exists(path)) {
		logger.warn("Path [${path.fileName}] already exists! Not downloading...")
		return
	}
	def linkTemplate = "https://raw.githubusercontent.com/SUPLA/supla-core/%s/supla-common/proto.h"
	def link = String.format(linkTemplate, tag)
	downloadFileWithRedirects(link, path.toFile())
}

void downloadFileWithRedirects(String url, File file) {
	logger.debug("Downloading file from: {} to {}", url, file.absolutePath)
	while (url) {
		new URL(url).openConnection().with { conn ->
			conn.instanceFollowRedirects = false
			url = conn.getHeaderField("Location")
			if (!url) {
				file.withOutputStream { out ->
					conn.inputStream.with { inp ->
						out << inp
					}
				}
			}
		}
	}
}