plugins {
	id "org.shipkit.java" version "2.0.31"
}

ext {
	slf4j_version = '1.7.25'
	random_beans_version = '3.8.0'
	reactorVersion = "3.1.1.RELEASE"
}

@SuppressWarnings("UnnecessaryQualifiedReference")
def allProjects(Closure c) {
	allprojects { p ->
		if (!isRootProject(p)) { // only for non test projects
			c.delegate = p
			c.resolveStrategy = groovy.lang.Closure.DELEGATE_FIRST
			c(p)
		}
	}
}

private static boolean isRootProject(Project p) {
	p == p.getRootProject()
}

@SuppressWarnings("UnnecessaryQualifiedReference")
def prodProjects(Closure c) {
	allprojects { p ->
		if (!isTestProject(p) && !isRootProject(p)) { // only for non test projects
			c.delegate = p
			c.resolveStrategy = groovy.lang.Closure.DELEGATE_FIRST
			c(p)
		}
	}
}

private static boolean isTestProject(Project p) {
	p.name.toLowerCase().contains("test")
}

@SuppressWarnings("UnnecessaryQualifiedReference")
def releasableProjects(Closure c) {
	allprojects { p ->
		if (isReleasableProject(p)) {
			c.delegate = p
			c.resolveStrategy = groovy.lang.Closure.DELEGATE_FIRST
			c(p)
		}
	}
}

private static boolean isReleasableProject(Project p) {
	!isRootProject(p)
}

allprojects {
	repositories {
		mavenLocal()
		mavenCentral()
	}
}

allProjects {
	apply plugin: 'java'
	group = 'pl.grzeslowski.jSupla'
	sourceCompatibility = 1.8
}

// Integration tests
allProjects {
	apply plugin: 'idea'
	sourceSets {
		integrationTest {
			java {
				compileClasspath += main.output + test.output
				runtimeClasspath += main.output + test.output
				srcDir file('src/integrationTest/java')
			}
			resources.srcDir file('src/integrationTest/resources')
		}
	}
	configurations {
		integrationTestCompile.extendsFrom testCompile
		integrationTestImplementation.extendsFrom testImplementation
		integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
	}
	task integrationTest(type: Test) {
		description = 'Runs integration tests.'
		group = 'verification'

		testClassesDirs = sourceSets.integrationTest.output.classesDirs
		classpath = sourceSets.integrationTest.runtimeClasspath
		shouldRunAfter test
		outputs.upToDateWhen { false }
	}
	check.dependsOn integrationTest

	// Allow running integration tests in IntelliJ
	idea {
		module {
			sourceSets.integrationTest.allSource.srcDirs.each { srcDir -> module.testSourceDirs += srcDir }
		}
	}
}

// Add check style to all projects
prodProjects {
	apply plugin: 'checkstyle'
	tasks.withType(Checkstyle) {
		configFile = "${rootDir.path}/config/checkstyle/checkstyle.xml" as File
	}
}

allProjects {
	dependencies {
		compile group: 'org.slf4j', name: 'slf4j-api', version: slf4j_version

		testCompile 'junit:junit:4.12'
		testCompile 'org.assertj:assertj-core:3.8.0'
		testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
		testCompile group: 'io.github.benas', name: 'random-beans', version: random_beans_version
		testCompile group: 'io.github.benas', name: 'random-beans-validation', version: random_beans_version
		testCompile group: 'org.slf4j', name: 'slf4j-simple', version: slf4j_version
		testCompile group: 'com.google.guava', name: 'guava', version: '23.3-jre'
		testCompile group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: '2.3.3'
	}
}
