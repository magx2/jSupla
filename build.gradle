ext {
	slf4j_version = '1.7.25'
	checkerFrameworkVersion = '2.1.14'
}

allprojects {
	repositories {
		mavenLocal()
		mavenCentral()
	}
}

allprojects {
	apply plugin: 'java'
	group = 'pl.grzeslowski.jSupla'
	version = '0.1.0-SNAPSHOT'
	sourceCompatibility = 1.8
}

// Add check style to all projects
allprojects { p ->
	if(!isTestProject(p)) { // only for non test projects
		apply plugin: 'checkstyle'
		p.tasks.withType(Checkstyle) {
			configFile = "${rootDir.path}/config/checkstyle/checkstyle.xml" as File
		}
	}
}

// Add JaCoCO to all projects
allprojects { p ->
	if(!isTestProject(p)) { // only for non test projects
		apply plugin: "jacoco"
	}
}

// Add Checker to all projects
allprojects { p ->
	if(!isTestProject(p)) { // only for non test projects
		configurations {
			checkerFrameworkAnnotatedJDK {
				description = 'a copy of JDK classes with Checker Framework type qualifers inserted'
			}
			checkerFramework {
				description = 'The Checker Framework: custom pluggable types for Java'
			}
		}
		dependencies {
			checkerFrameworkAnnotatedJDK "org.checkerframework:jdk8:${checkerFrameworkVersion}"
			checkerFramework "org.checkerframework:checker:${checkerFrameworkVersion}"
			compile "org.checkerframework:checker-qual:${checkerFrameworkVersion}"
		}
		tasks.withType(JavaCompile).all { JavaCompile compile ->
			compile.options.compilerArgs = [
//					'-processor', 'org.checkerframework.checker.nullness.NullnessChecker',
					'-processor', 'org.checkerframework.checker.signedness.SignednessChecker',
					'-processorpath', "${configurations.checkerFramework.asPath}",
					'-Xmaxerrs', '10000',
					'-AprintErrorStack',
					// uncomment to turn Checker Framework errors into warnings
					// '-Awarns', '-Xmaxwarns', '10000',
					"-Xbootclasspath/p:${configurations.checkerFrameworkAnnotatedJDK.asPath}"
			]
		}
	}
}

allprojects {
	dependencies {
		compile group: 'org.slf4j', name: 'slf4j-api', version: slf4j_version

		testCompile 'junit:junit:4.12'
		testCompile 'org.assertj:assertj-core:3.8.0'
	}
}

private static boolean isTestProject(Project p) {
	p.name.toLowerCase().contains("test")
}

task wrapper(type: Wrapper) {
	gradleVersion = '4.0.1'
}