plugins {
	id("io.github.gradle-nexus.publish-plugin") version "2.0.0"
	id 'signing'
}

nexusPublishing {
	repositories {
		// Only define 'sonatype' ONCE globally
		sonatype {
			nexusUrl.set(uri("https://central.sonatype.com/api/v1/publish/"))
			username.set(findProperty("centralUsername") ?: System.getenv("CENTRAL_USERNAME"))
			password.set(findProperty("centralPassword") ?: System.getenv("CENTRAL_PASSWORD"))
		}
	}
}

ext {
	slf4j_version = '2.0.11'
	random_beans_version = '3.9.0'
	reactorVersion = "3.6.2"
}

@SuppressWarnings("UnnecessaryQualifiedReference")
def allProjects(Closure c) {
	allprojects { p ->
		if (!isRootProject(p)) { // only for non test projects
			c.delegate = p
			c.resolveStrategy = groovy.lang.Closure.DELEGATE_FIRST
			c(p)
		}
	}
}

private static boolean isRootProject(Project p) {
	p == p.getRootProject()
}

@SuppressWarnings("UnnecessaryQualifiedReference")
def prodProjects(Closure c) {
	allprojects { p ->
		if (!isTestProject(p) && !isRootProject(p)) { // only for non test projects
			c.delegate = p
			c.resolveStrategy = groovy.lang.Closure.DELEGATE_FIRST
			c(p)
		}
	}
}

private static boolean isTestProject(Project p) {
	p.name.toLowerCase().contains("test")
}

allprojects {
	repositories {
		mavenCentral()
	}
}

allProjects {
	apply plugin: 'java-library'
	apply plugin: 'maven-publish'
	apply plugin: 'signing'
	group = 'pl.grzeslowski.jSupla'
	java {
		toolchain {
			languageVersion = JavaLanguageVersion.of(17)
		}
	}
}

allProjects {
	version jSuplaVersion
}

// Integration tests
allProjects {
	apply plugin: 'idea'
	sourceSets {
		integrationTest {
			java {
				compileClasspath += main.output + test.output
				runtimeClasspath += main.output + test.output
				srcDir file('src/integrationTest/java')
			}
			resources.srcDir file('src/integrationTest/resources')
		}
	}
	configurations {
		integrationTestCompile.extendsFrom testCompile
		integrationTestImplementation.extendsFrom testImplementation
		integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
	}
	task integrationTest(type: Test) {
		group = 'verification'
		description = 'Runs integration tests.'
		group = 'verification'

		testClassesDirs = sourceSets.integrationTest.output.classesDirs
		classpath = sourceSets.integrationTest.runtimeClasspath
		shouldRunAfter test
		outputs.upToDateWhen { false }
	}
	check.dependsOn integrationTest

	// Allow running integration tests in IntelliJ
	idea {
		module {
			sourceSets.integrationTest.allSource.srcDirs.each { srcDir -> module.testSourceDirs += srcDir }
		}
	}
}

// lombok
allProjects {
	dependencies {
		compileOnly 'org.projectlombok:lombok:1.18.32'
		annotationProcessor 'org.projectlombok:lombok:1.18.32'

		testCompileOnly 'org.projectlombok:lombok:1.18.32'
		testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'
	}

	tasks.withType(Javadoc) {
		options.addStringOption('Xdoclint:none', '-quiet')
	}
}

// Maven Central release
prodProjects {
	tasks.register('javadocJar', Jar) {
		archiveClassifier.set('javadoc')
		from javadoc
	}

	tasks.register('sourcesJar', Jar) {
		archiveClassifier.set('sources')
		from sourceSets.main.allSource
	}

	group = project.group
	archivesBaseName = project.name
	version = project.version

	def final githubRepo = "magx2/jSupla"
	publishing {
		publications {
			mavenJava(MavenPublication) {
				artifactId = project.name
				from components.java
				artifact tasks.javadocJar
				artifact tasks.sourcesJar

				pom {
					name = project.name
					description = project.description
					packaging = 'jar'
					url = "https://github.com/${githubRepo}"

					scm {
						connection = "scm:git:git://github.com/${githubRepo}.git"
						developerConnection = "scm:git:git://github.com/${githubRepo}.git"
						url = "https://github.com/${githubRepo}.git"
					}

					licenses {
						license {
							name = "MIT"
							url = "https://opensource.org/licenses/MIT"
						}
					}

					developers {
						developer {
							id.set('magx2')
							name.set('Martin Grzeslowski')
							email.set('hello@grzeslowski.pl')
						}
					}
				}
			}
		}
	}

	signing {
		sign publishing.publications.mavenJava
	}
}

allProjects {
	dependencies {
		implementation group: 'org.slf4j', name: 'slf4j-api', version: slf4j_version

		testImplementation 'junit:junit:4.12'
		testImplementation 'org.assertj:assertj-core:3.8.0'
		testImplementation group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
		testImplementation group: 'io.github.benas', name: 'random-beans', version: random_beans_version
		testImplementation group: 'io.github.benas', name: 'random-beans-validation', version: random_beans_version
		testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: slf4j_version
		testImplementation group: 'com.google.guava', name: 'guava', version: '23.3-jre'
		testImplementation group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: '3.3'
	}
}

apply from: 'release.gradle'