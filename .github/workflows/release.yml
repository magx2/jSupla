name: Release with Gradle
on:
  workflow_dispatch:
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
      - name: Release with Gradle
        id: release
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          KEY_ID: ${{ secrets.KEY_ID }}
          PASSWORD: ${{ secrets.PASSWORD }}
          SECRET_KEY_RING_BASE64: ${{ secrets.SECRET_KEY_RING_BASE64 }}
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          
          log() {
            echo -e "\033[1;34m[INFO]\033[0m $1"
          }

          # Run Gradle tasks
          log "./gradlew clean test releaseVersion"
          ./gradlew clean test releaseVersion
          log "./gradlew publishToMavenLocal"
           echo -n "$SECRET_KEY_RING_BASE64" | base64 --decode > secring.gpg
          ./gradlew publishToMavenLocal \
            -Psigning.keyId=$KEY_ID \
            -Psigning.password=$PASSWORD \
            -Psigning.secretKeyRingFile=$(realpath ./secring.gpg)

          log "Listing generated files..."
          ls -R

          # Load version from gradle.properties
          J_SUPLA_VERSION=$(grep "^jSuplaVersion=" gradle.properties | cut -d'=' -f2)
          log "Version loaded: $J_SUPLA_VERSION"
          ./gradlew noSnapshots

          # Function to process artifacts for a given module
          process_artifacts() {
            local module_name=$1
            log "Processing artifacts for $module_name..."

            local target_dir="build/pl/grzeslowski/jSupla/$module_name/$J_SUPLA_VERSION"
            
            # Create target directory
            log "Creating target directory for $module_name..."
            mkdir -p "$target_dir"

            # Remove snapshot files
            log "Removing snapshot files for $module_name..."
            rm -f "$module_name/build/libs/*-SNAPSHOT.jar"
            rm -f "$module_name/build/libs/*-SNAPSHOT.jar.asc"

            # Copy artifacts
            log "Copying artifacts for $module_name..."
            cp "$module_name/build/libs/$module_name-$J_SUPLA_VERSION.jar" "$target_dir/"
            cp "$module_name/build/libs/$module_name-$J_SUPLA_VERSION.jar.asc" "$target_dir/"
            cp "$module_name/build/libs/$module_name-$J_SUPLA_VERSION-javadoc.jar" "$target_dir/"
            cp "$module_name/build/libs/$module_name-$J_SUPLA_VERSION-javadoc.jar.asc" "$target_dir/"
            cp "$module_name/build/libs/$module_name-$J_SUPLA_VERSION-sources.jar" "$target_dir/"
            cp "$module_name/build/libs/$module_name-$J_SUPLA_VERSION-sources.jar.asc" "$target_dir/"
            cp "$module_name/build/publications/mavenJava/pom-default.xml" "$target_dir/$module_name-$J_SUPLA_VERSION.pom"
            cp "$module_name/build/publications/mavenJava/pom-default.xml.asc" "$target_dir/$module_name-$J_SUPLA_VERSION.pom.asc"

            # Generate checksums
            log "Generating checksums for $module_name artifacts..."
            for file in "$target_dir"/*; do
                [[ "$file" == *.md5 || "$file" == *.sha1 ]] && continue
                md5sum "$file" | cut -d' ' -f1 > "$file.md5"
                sha1sum "$file" | cut -d' ' -f1 > "$file.sha1"
            done
          }

          # Process artifacts for server and protocol modules
          process_artifacts "server"
          process_artifacts "protocol"

          # Go back to root and zip the "pl" directory
          log "Creating ZIP archive..."
          cd build || exit
          zip -r "jSupla-server-$J_SUPLA_VERSION.zip" pl

          TOKEN=$(echo "$OSSRH_USERNAME:$OSSRH_PASSWORD" | base64)

          log "Creating release"
          ID=$(curl --request POST \
            --header "Authorization: Bearer $TOKEN" \
            --form bundle="@jSupla-server-$J_SUPLA_VERSION.zip" \
            https://central.sonatype.com/api/v1/publisher/upload)

          log "Release ID=$ID"
          log "Waiting for deployment to be validated..."
          for i in {1..50}; do
              log "Checking status... (Attempt $i of 50)"
              STATUS_RESPONSE=$(curl -s --request POST \
                --header "Authorization: Bearer $TOKEN" \
                "https://central.sonatype.com/api/v1/publisher/status?id=$ID")
              
              log "Status response: $STATUS_RESPONSE"

              if echo "$STATUS_RESPONSE" | grep -q '"publishingStatus":"FAILED"'; then
                log "Deployment failed."
                exit 1
              fi
              
              if echo "$STATUS_RESPONSE" | grep -q '"publishingStatus":"VALIDATED"'; then
                log "Deployment is validated."
                break
              fi
              
              if [ "$i" -eq 50 ]; then
                log "Deployment did not validate after 50 attempts."
                exit 1
              fi
              
              log "Sleeping for 1 minute..."
              sleep 60
          done

          log "Accepting release..."
          curl --request POST \
            --header "Authorization: Bearer $TOKEN" \
            "https://central.sonatype.com/api/v1/publisher/deployment/$ID"

          log "Tagging"  
          cd ../ || exit
          ./gradlew tag
          # Define the file path
          FILE="build/tag.txt"

          # Check if the file exists
          if [ -f "$FILE" ]; then
            # Read the content of the file into the TAG variable
            TAG=$(cat "$FILE")
            log "tag value: $TAG"
            echo "tag=$TAG" >> $GITHUB_OUTPUT

            log "New tag $TAG"
            git tag "$TAG"
            log "Pushing tag..."
            git push origin "$TAG"
          else
            log "File $FILE does not exist."
            exit 33
          fi

          ./gradlew nextSnapshot
          git add gradle.properties
          git commit -m "Update jSuplaVersion to SNAPSHOT version in gradle.properties"

          log "Pushing master to origin..."
          git push origin master 