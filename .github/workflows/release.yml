name: Release with Gradle
on:
  workflow_dispatch:
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
      - name: Release with Gradle
        id: release
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          KEY_ID: ${{ secrets.KEY_ID }}
          PASSWORD: ${{ secrets.PASSWORD }}
          SECRET_KEY_RING_BASE64: ${{ secrets.SECRET_KEY_RING_BASE64 }}
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          
          log() {
            echo -e "\033[1;34m[INFO]\033[0m $1"
          }

          # Run Gradle tasks
          log "./gradlew clean releaseVersion"
          ./gradlew clean releaseVersion
          log "./gradlew publishToMavenLocal"
           echo -n "$SECRET_KEY_RING_BASE64" | base64 --decode > secring.gpg
          ./gradlew publishToMavenLocal \
            -Psigning.keyId=$KEY_ID \
            -Psigning.password=$PASSWORD \
            -Psigning.secretKeyRingFile=$(realpath ./secring.gpg)

          # Load version from gradle.properties
          J_SUPLA_VERSION=$(grep "^jSuplaVersion=" gradle.properties | cut -d'=' -f2)
          log "Version loaded: $J_SUPLA_VERSION"
          ./gradlew noSnapshots

          # Define target directories
          log "Creating target directories..."
          mkdir -p "build/pl/grzeslowski/jSupla/server/$J_SUPLA_VERSION"
          mkdir -p "build/pl/grzeslowski/jSupla/protocol/$J_SUPLA_VERSION"

          SERVER_TARGET_DIR="build/pl/grzeslowski/jSupla/server/$J_SUPLA_VERSION"
          # Copy server artifacts
          log "Copying server artifacts..."
          cp server/build/libs/* "$SERVER_TARGET_DIR/"
          cp server/build/publications/mavenJava/pom-default.xml       "$SERVER_TARGET_DIR/server-$J_SUPLA_VERSION.pom"
          cp server/build/publications/mavenJava/pom-default.xml.asc   "$SERVER_TARGET_DIR/server-$J_SUPLA_VERSION.pom.asc"

          # Generate checksums for server artifacts
          log "Generating checksums for server artifacts..."
          for file in "$SERVER_TARGET_DIR"/*; do
              [[ "$file" == *.md5 || "$file" == *.sha1 ]] && continue
              md5sum "$file" | cut -d' ' -f1 > "$file.md5"
              sha1sum "$file" | cut -d' ' -f1 > "$file.sha1"
          done

          # Copy protocol artifacts
          log "Copying protocol artifacts..."
          PROTOCOL_TARGET_DIR="build/pl/grzeslowski/jSupla/protocol/$J_SUPLA_VERSION"
          cp protocol/build/libs/* "$PROTOCOL_TARGET_DIR/"
          cp protocol/build/publications/mavenJava/pom-default.xml     "$PROTOCOL_TARGET_DIR/protocol-$J_SUPLA_VERSION.pom"
          cp protocol/build/publications/mavenJava/pom-default.xml.asc "$PROTOCOL_TARGET_DIR/protocol-$J_SUPLA_VERSION.pom.asc"

          # Generate checksums for protocol artifacts
          log "Generating checksums for protocol artifacts..."
          for file in "$PROTOCOL_TARGET_DIR"/*; do
              [[ "$file" == *.md5 || "$file" == *.sha1 ]] && continue
              md5sum "$file" | cut -d' ' -f1 > "$file.md5"
              sha1sum "$file" | cut -d' ' -f1 > "$file.sha1"
          done

          # Go back to root and zip the "pl" directory
          log "Creating ZIP archive..."
          cd build || exit
          zip -r "jSupla-server-$J_SUPLA_VERSION.zip" pl

          TOKEN=$(echo "$OSSRH_USERNAME:$OSSRH_PASSWORD" | base64)

          log "Creating release"
          ID=$(curl --request POST \
            --header "Authorization: Bearer $TOKEN" \
            --form bundle="@jSupla-server-$J_SUPLA_VERSION.zip" \
            https://central.sonatype.com/api/v1/publisher/upload)

          log "Release ID=$ID"
          curl --request POST \
            --header "Authorization: Bearer $TOKEN" \
            "https://central.sonatype.com/api/v1/publisher/status?id=$ID"

          log "Sleeping..."
          sleep 60
          log "Sleep end"

          log "Accepting release..."
          curl --request POST \
            --verbose \
            --header "Authorization: Bearer $TOKEN" \
            "https://central.sonatype.com/api/v1/publisher/deployment/$ID"

          log "Tagging"  
          ./gradlew tag
          # Define the file path
          FILE="build/tag.txt"

          # Check if the file exists
          if [ -f "$FILE" ]; then
            # Read the content of the file into the TAG variable
            TAG=$(cat "$FILE")
            log "tag value: $TAG"
            echo "tag=$TAG" >> $GITHUB_OUTPUT

            log "New tag $TAG"
            git tag "$TAG"
            log "Pushing tag..."
            git push origin "$TAG"
          else
            log "File $FILE does not exist."
            exit 33
          fi

          ./gradlew nextSnapshot
          git add gradle.properties
          git commit -m "Update jSuplaVersion to SNAPSHOT version in gradle.properties"

          log "Pushing master to origin..."
          git push origin master 